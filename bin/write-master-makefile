#!/usr/bin/perl -W
# -*- cperl -*-

use List::Util qw(any);

my @banks = ();
my @demobanks = ();
{
  for (my $bank = 0; $bank < 32; ++$bank) {
    push @banks => sprintf "%02x" => $bank;
  }
  for (my $bank = 0; $bank < 8; ++$bank) {
    push @demobanks => sprintf "%02x" => $bank;
  }
}

print '# Makefile (generated)
# -*- makefile -*-


YEAR=$(shell date +%Y)
YEAR2=$(shell date +%y)
MONTH=$(shell date +%m)
DATE=$(shell date +%d)
JULIAN=$(shell date +%j)
BUILD=$(shell date +%y.%j)
ASFLAGS=--nostart --long-branch --case-sensitive \
	--ascii -I. -I Source/Common -I Source/Routines -I Source/Generated/Common -I Source/Generated/Maps \
	-D YEARNOW=${YEAR} -D MONTHNOW=${MONTH} \
	-D DATENOW=${DATE} -D JULIANDATENOW=${JULIAN} \
	-D BUILD=${BUILD} \
	-Wall -Wno-shadow -Wno-leading-zeros
AS7800=64tass ${ASFLAGS} --m6502 -m --tab-size=1 --verbose-list

';

my %rules = ();

for my $tv (qw(NTSC PAL)) {

  print "\n\nDist/Phantasia.Demo.$tv.a78:\t";
  for my $bank (@demobanks) {
    print "\\\n\tObject/Bank$bank.Demo.$tv.o ";
  }
  print "
\tmkdir -p Dist
\tcat \$^ > \$\@
\tbin/7800sign -w \$\@
\tbin/7800header -f Source/header.demo.$tv.script \$\@\n\n";

  print "\n\nDist/Phantasia.AA.$tv.a78:\t";
  for my $bank (@banks) {
    print "\\\n\tObject/Bank$bank.AA.$tv.o ";
  }
  print "
\tmkdir -p Dist
\tcat \$^ > \$\@
\tbin/7800sign -w \$\@
\tbin/7800header -f Source/header.AA.$tv.script \$\@\n\n";

  print "\n\nDist/Phantasia.$tv.a78:\t";
  for my $bank (@banks) {
    print "\\\n\tObject/Bank$bank.$tv.o ";
  }
  print "
\tmkdir -p Dist
\tcat \$^ > \$\@
\tbin/7800sign -w \$\@
\tbin/7800header -f Source/header.$tv.script \$\@\n\n";

  my @places = @banks;
  unshift @places => 'Common';
  unshift @places => 'Maps';

  for my $bank (@places) {
    my $bankdir = "Source/Banks/Bank$bank";
    my $genrdir = "Source/Generated/Bank$bank";
    my $bankfile = "Bank$bank.s";

    if ('Common' eq $bank) {
      $bankdir = "Source/Common";
      $genrdir = "Source/Generated/Common";
      $bankfile = undef;
    }

    if ('Maps' eq $bank) {
      $bankdir = "Source/Maps";
      $genrdir = "Source/Generated/Maps";
      $bankfile = undef;
    }

    my %seen = ();

    my @files = ();
    {
      my @todo = ();
      if ($bankfile) {
        push @todo => "$bankdir/$bankfile";
      }

      {
        opendir my $src, "$bankdir/";
        while (my $file = readdir $src) {
          next unless $file =~ /\.(s|txt|art|midi|tmx|tsx)$/;
          push @todo => "$bankdir/$file";
        }
        closedir $src;
      }

      while (@todo) {
        my $path = shift @todo;
        if ($path =~ m(^Source/Generated)) {
          my $orig_path = $path;
          $orig_path =~ s(Generated/Common) (Common);
          $orig_path =~ s(Generated/Maps) (Maps);
          $orig_path =~ s(Generated/Bank) (Banks/Bank);
          if ($orig_path =~ /\.s$/) {
            $orig_path =~ s(\.s$) ();
            if (-f "$orig_path.midi" or -f "$orig_path.txt" or -f "$orig_path.tsx"
                 or -f "$orig_path.tmx" or -f "$orig_path.tsx") {
              unless ($seen{ $path }) {
                ++$seen{ $path };
                push @files => $path;
              }
            }
          }
          if ($orig_path =~ /\.(bin|deflate)$/) {
            $orig_path =~ s(\.(bin|deflate)$) ();
            if (-f "$orig_path.art") {
              unless ($seen{ $path }) {
                ++$seen{ $path };
                push @files => $path;
              }
            }
          }
        }
        next unless -f $path;
        next if $seen{ $path };
        ++$seen{ $path };

        my $file = ( split '\\/' => $path )[ -1 ];
        my ($base, $ext, $more) = split '\\.' => $file;
        if ($more && 'bin' eq $more) {
          next if $rules{ $path };
          ++ $rules{ $path };
          next;
        }
        if ('txt' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          print "$genrdir/$base.s:\t$bankdir/$base.txt \\
\t\tSource/Common/SpeakJet.dic bin/convert-to-speakjet
\tmkdir -p $genrdir
\tbin/convert-to-speakjet \$< Source/Common/SpeakJet.dic \$\@\n\n";
          push @files => "$genrdir/$base.s";
        } elsif ('midi' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          print "$genrdir/$base.s:\t$bankdir/$base.midi\\
\t\tbin/skyline-tool
\tmkdir -p $genrdir
\tbin/skyline-tool compile-music \$\@ \$<\n\n";
          push @files => "$genrdir/$base.s";
        } elsif ('art' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          push @files => "$genrdir/$base.art.bin";
          print "$genrdir/$base.art.bin:\t$bankdir/$base.art bin/skyline-tool ";
          open my $art, '<', $path or die;
          while (my $line = <$art>) {
            next if $line =~ /^\s*$/;
            next if $line =~ /^\s*#/;
            die "Bad line in $path: $line" unless $line =~ /^\s*(\S+\.png)\s+/;
            my $file = $1;
            print "\\\n\t\t$bankdir/$file";
          }
          print "
\tmkdir -p $genrdir
\tbin/skyline-tool compile-art-7800 \$\@ \$<\n\n";
          push @files => "$genrdir/$base.art.bin";
        } elsif ('tmx' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          print "$genrdir/$base.s:\t$bankdir/$base.tmx bin/skyline-tool \$(shell ls $bankdir/*.tsx $bankdir/*.png)
\tmkdir -p $genrdir
\tbin/skyline-tool compile-map \$<\n\n";
          push @files => "$genrdir/$base.s";
        } elsif ('tsx' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          print "$genrdir/$base.s:\t$bankdir/$base.tsx bin/skyline-tool \$(shell ls $bankdir/*.png)
\tmkdir -p $genrdir
\tbin/skyline-tool compile-tileset \$<\n\n";
          push @files => "$genrdir/$base.s";
        } elsif ('s' eq $ext) {
          push @files => $path;
          open my $text, '<', $path;
          while (my $line = <$text>) {
            if ($line =~ /\.include "(.+)\.s"/) {
              my $dep = $1;
              if ($bank ne 'Common' and $bank ne 'Maps') {
                push @todo => "$bankdir/$dep.s";
                push @todo => "$genrdir/$dep.s";
              }
              push @todo => "Source/Common/$dep.s";
              push @todo => "Source/Routines/$dep.s";
              push @todo => "Source/Generated/Common/$dep.s";
              push @todo => "Source/Generated/Maps/$dep.s";
            } elsif ($line =~ /\.binary "(.+)\.bin"/) {
              my $dep = $1;
              if ($bank ne 'Common' and $bank ne 'Maps') {
                push @todo => "$bankdir/$dep.s";
                push @todo => "$genrdir/$dep.s";
              }
              push @todo => "$bankdir/$dep";
              push @todo => "$genrdir/$dep.bin";
              push @todo => "Source/Common/$dep";
              push @todo => "Source/Routines/$dep";
              push @todo => "Source/Generated/Common/$dep.bin";
              push @todo => "Source/Generated/Maps/$dep.bin";
            } elsif ($line =~ /\.binary "(.+)\.deflate"/) {
              my $dep = $1;
              push @todo => "$genrdir/$dep.bin";
              push @todo => "Source/Generated/Common/$dep.deflate";
              push @todo => "Source/Generated/Maps/$dep.deflate";
            }
          }
          close $text;
        } else {
          die "Unhandled extension $ext";
        }
      }
    }

    if ($bank eq 'Common' or $bank eq 'Maps') {
      next;
    }

    print "Object/Bank$bank.$tv.o:\t";
    for my $file (@files) {
      print "\\\n\t$file";
    }

    print "
\tmkdir -p Object
\t\${AS7800} -DTV=$tv \\
\t   -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n\n";

    print "Object/Bank$bank.AA.$tv.o:\t";
    for my $file (@files) {
      print "\\\n\t$file";
    }

    print "
\tmkdir -p Object
\t\${AS7800} -DTV=$tv -DATARIAGE\\
\t   -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n\n";

    unless (any { $_ eq $bank } @demobanks) {
      next;
    }

    print "Object/Bank$bank.Demo.$tv.o:\t";
    for my $file (@files) {
      print "\\\n\t$file";
    }
    print "
\tmkdir -p Object
\t\${AS7800} -DTV=$tv -DDEMO=true \\
\t   -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n\n";

  } # end of bank
} #end of TV
